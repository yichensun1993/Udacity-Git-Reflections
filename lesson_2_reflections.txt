What happens when you initialize a repository? Why do you need to do it?
A hidden .git repository is created and metadata about the history of the repository will be stored there as I will not usually intereact with those metadata.
And only after I created the .git configuration shall I be able to keep the directory a repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is an intermediate status between a working directory and the repository, it adds file from working directory to prepare a commit which operates on the repository.
This gives flexibility to making commits, and allows us to make logical independent commit one at a time.

How can you use the staging area to make sure you have one commit per logical change?
As staging area is a copy of the most recent commit, so any changes after that will be shown by "git diff --staged", and we can know what files have been changed. And at the same time,
we could check the difference between the working directory and the staging area, and that also gives us hint on our recent modifications. Based on bith, we could make logical independent commits.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When I inevitably run into different experiments or when I want to track different versions simultaneously, branches will be helpful as each branch is organized and given a name
to be tracked. And I can work on different branches by easy switch and when it becomes necessary, I can keep my history clean and tidy.

How do the diagrams help you visualize the branch structure?
The diagram traces back from designated branch tips and the whole structure of the commit history on these branches willbe displayed. This will be more informative regarding
experimental coding and feature history.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
We can merge the modifications to code from two branches together. When we merge two branches, Git will check the compatibility of the codes so that we could stich the codes together with new functions or
features introduced in the other code. We represent in the diagram as it is shown in the "git log --graph --oneline" which is the logical structure of the merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?