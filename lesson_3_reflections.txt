When would you want to use a remote repository rather than keeping all your work local?
When I need to share my code with others or when I am in collaboration with others. By commiting to a remote repository,
I can keep my most updated code version reachable to others and get recommendation for improvement. It is also another backup
of my code so I won't panic if I accidentally delete the local version.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
There might be others working on the same file. So instead of letting everyone's progress jam up my local git log, I shall want to
keep updated to the online version only when I know what is going on and what commits others have made.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are online version of a cloned repository, this exists when we want to copy another's repository and share with collaborators to improve. 
Clones are local version of a repository from another Github URL or file location, I would git clone a repository for editing on a local computer.
Branches are the unit each git push/pull operates on and keep track of a feature's history.

What is the benefit of having a copy of the last known state of the remote stored locally?
This creates the branch origin/master, and this copy of the remote branch could be used to fetch new changes in the remote branch and prepare for
future merge. In this case, we could know where are we from the last know push/pull, and when we are ready to sync with the most recent commit on
Github, we can have local changes and last remote branch's changes merged to reduce conflicts.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would possibly need to copy my files between me and collaborators frequently for combining our progress, but by using Github, it is much simpler
to let Github track different branches and let us merge our progress whenever necessary. By adding everything to Github, me and collaborators would
have a common place to work on, and this works best when physically I cannot meet my collaborators.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
When the feature is immature that I want to test on a separate branch rather than jam up my master branch, or when the work is not linearly related 
to my past master commits. Work directly on master branch is more straightforward and easy to operate with, while changes introduced to another branch
would clear up the logical map of my work and make it easy to collaborate with others, i.e. pull request, leaving comments ...